function SendTo-Teams {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [string]$RiskDetections,
        [Parameter(Mandatory = $true)]
        [string]$WebhookUrl
    )

    $body = '<p><strong>Azure Risky Sign-ins Alert</strong><br>{0}<br><a href="https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RiskySignInsBlade" target="_blank">Azure Risky Sign-ins</a> <a href="https://clarkincbiz.sharepoint.com/sites/NOCAlerts/SitePages/Azure-Monitoring.aspx" target="_blank">Wiki Link</a></p>' -f $RiskDetections

    $HashBody = [PSCustomObject][Ordered]@{
        "@type"      = "text/html"
        "@context"   = "http://schema.org/extensions"
        "summary"    = "Informational: New Risky User Detection"
        "title"      = "Informational: New Risky User Detection"
        "text"       = $body
    }

    $Message = ConvertTo-Json $HashBody -Depth 100

    $response = Invoke-WebRequest -Method Post -Uri $WebhookUrl -Body $Message -ContentType 'application/json' -UseBasicParsing

    if ($response.StatusCode -gt 200) {
        throw $response
    }
}

function ConverRiskyDetectionsTo-String {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [Object[]]$RiskDetections
    )

    $strings = foreach ($event in $RiskDetections) {
        "UserName: {0}, ActivityTime: {1}, DetectedTime: {2}, EventId: {3}" -f $event.UserPrincipalName, $event.ActivityDateTime.AddHours(-5), $event.DetectedDateTime.AddHours(-5), $event.Id
    }

    $strings -join "<br>"
}

function Filter-RiskyDetections {
    #Requires -Modules Microsoft.Graph.Identity.SignIns
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [string]$SecretId,
        [Parameter(Mandatory = $true)]
        [string]$SecretKey,
        [Parameter(Mandatory = $true)]
        [string]$TenantId,
        [Parameter(Mandatory = $true)]
        [int]$NDaysToQuery,
        [Parameter(Mandatory = $true)]
        [string]$CacheExportPath
    )

    try {
        $key = $SecretKey | ConvertTo-SecureString -AsPlainText -Force
        $creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $SecretId, $key
        Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $creds -NoWelcome -ErrorAction Stop
    } catch {throw $_}

    $FilterString = "activityDateTime gt {0} and detectedDateTime gt {0} and riskState eq 'atRisk'"  -f [DateTime]::UtcNow.AddDays(-$NDaysToQuery).ToString('u').Replace(' ','T')
    $Response = Get-MgRiskDetection -Filter $FilterString -Top 500

    $cache = $null
    #get or create cached response
    if (Test-Path $CacheExportPath) {
        $cache = Import-Clixml -Path $CacheExportPath
    }

    $Difference = $Response | Where-Object {$cache -notcontains $_.Id}

    # cache response
    $Response.Id | Export-Clixml -Path $CacheExportPath -Force

    $Difference | Sort-Object -Property DetectedDateTime -Descending
}


# if any new risky detections are found post a Teams message
$RiskyDetections = Filter-RiskyDetections -SecretId $SecretId -SecretKey $SecretKey -TenantId $TenantId -NDaysToQuery $NDaysToQuery -CacheExportPath $CacheExportPath

$TeamsPostError = $null
if ($null -ne $RiskyDetections) {
    $RiskDetections = ConverRiskyDetectionsTo-String -RiskDetections $RiskyDetections
    try {
        $resp = SendTo-Teams -RiskDetections $RiskDetections -WebhookUrl $WebhookUrl
    } catch {$TeamsPostError = $_}
}

$LogString = "LastRan: {0}, RiskDetectionsCount: {1}, Error: {2}" -f (Get-Date).DateTime, $RiskyDetections.Count, $TeamsPostError
$LogString | Out-File $LoggingPath -Append -Force
